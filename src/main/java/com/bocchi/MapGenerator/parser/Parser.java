
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 30 18:18:10 CST 2025
//----------------------------------------------------

package com.bocchi.MapGenerator.parser;

import java.util.*;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri May 30 18:18:10 CST 2025
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\005\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\005\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\042\004\010\005\012\006\011\007\020\010" +
    "\021\011\006\012\005\013\004\014\023\015\024\016\022" +
    "\017\014\020\015\021\016\022\025\023\013\001\002\000" +
    "\004\027\114\001\002\000\004\027\111\001\002\000\004" +
    "\027\106\001\002\000\006\002\000\025\104\001\002\000" +
    "\004\027\101\001\002\000\004\027\076\001\002\000\004" +
    "\027\073\001\002\000\004\027\070\001\002\000\004\027" +
    "\065\001\002\000\004\027\062\001\002\000\004\027\057" +
    "\001\002\000\006\002\uffff\025\uffff\001\002\000\004\027" +
    "\054\001\002\000\004\027\051\001\002\000\004\027\046" +
    "\001\002\000\004\027\043\001\002\000\004\027\040\001" +
    "\002\000\004\027\030\001\002\000\004\002\027\001\002" +
    "\000\004\002\001\001\002\000\004\024\031\001\002\000" +
    "\004\025\034\001\002\000\004\030\033\001\002\000\006" +
    "\002\uffef\025\uffef\001\002\000\004\024\035\001\002\000" +
    "\004\025\036\001\002\000\004\024\037\001\002\000\004" +
    "\030\uffed\001\002\000\004\024\031\001\002\000\004\030" +
    "\042\001\002\000\006\002\ufff4\025\ufff4\001\002\000\004" +
    "\024\031\001\002\000\004\030\045\001\002\000\006\002" +
    "\ufff5\025\ufff5\001\002\000\004\024\031\001\002\000\004" +
    "\030\050\001\002\000\006\002\ufff3\025\ufff3\001\002\000" +
    "\004\024\031\001\002\000\004\030\053\001\002\000\006" +
    "\002\ufff9\025\ufff9\001\002\000\004\024\031\001\002\000" +
    "\004\030\056\001\002\000\006\002\ufffa\025\ufffa\001\002" +
    "\000\004\024\031\001\002\000\004\030\061\001\002\000" +
    "\006\002\ufff0\025\ufff0\001\002\000\004\024\031\001\002" +
    "\000\004\030\064\001\002\000\006\002\ufff1\025\ufff1\001" +
    "\002\000\004\024\031\001\002\000\004\030\067\001\002" +
    "\000\006\002\ufff2\025\ufff2\001\002\000\004\024\031\001" +
    "\002\000\004\030\072\001\002\000\006\002\uffee\025\uffee" +
    "\001\002\000\004\024\031\001\002\000\004\030\075\001" +
    "\002\000\006\002\ufffc\025\ufffc\001\002\000\004\024\031" +
    "\001\002\000\004\030\100\001\002\000\006\002\ufffb\025" +
    "\ufffb\001\002\000\004\024\031\001\002\000\004\030\103" +
    "\001\002\000\006\002\ufffd\025\ufffd\001\002\000\042\004" +
    "\010\005\012\006\011\007\020\010\021\011\006\012\005" +
    "\013\004\014\023\015\024\016\022\017\014\020\015\021" +
    "\016\022\025\023\013\001\002\000\006\002\ufffe\025\ufffe" +
    "\001\002\000\004\024\031\001\002\000\004\030\110\001" +
    "\002\000\006\002\ufff8\025\ufff8\001\002\000\004\024\031" +
    "\001\002\000\004\030\113\001\002\000\006\002\ufff7\025" +
    "\ufff7\001\002\000\004\024\031\001\002\000\004\030\116" +
    "\001\002\000\006\002\ufff6\025\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\010\002\025\003\006\004\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\104\001" +
    "\001\000\002\001\001\000\004\005\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\114\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    public static class ElementoMapa {
        public String tipo;
        public int x, y, z;
        public ElementoMapa(String tipo, int x, int y, int z) {
            this.tipo = tipo;
            this.x = x;
            this.y = y;
            this.z = z;
        }
        public String toString() {
            return tipo + "(" + x + "," + y + "," + z + ")";
        }
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mapa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mapa ::= elementos 
            {
              Object RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = (ArrayList<ElementoMapa>)els;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elementos ::= elemento 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<ElementoMapa> l = new ArrayList<>();
    l.add((ElementoMapa)e);
    RESULT = l;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elementos ::= elementos COMA elemento 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ((ArrayList<ElementoMapa>)l).add((ElementoMapa)e);
    RESULT = l;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elemento ::= ARBOL PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Árbol", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= PINO PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Pino", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elemento ::= PIEDRA PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Piedra", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= PIEDRA_CALIZA PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Piedra_caliza", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elemento ::= PIEDRA_GRANITO PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Piedra_granito", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // elemento ::= PIEDRA_MARMOL PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Piedra_marmol", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // elemento ::= CUEVA PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Cueva", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // elemento ::= TORRE_CASTILLO PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Torre_castillo", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // elemento ::= CASA PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Casa", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elemento ::= CASA_MADERA PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Casa_madera", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elemento ::= CASA_PIEDRA PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Casa_piedra", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // elemento ::= ANIMAL PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Animal", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elemento ::= PERSONA PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Persona", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elemento ::= DRAGON PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Dragón", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elemento ::= MOUNSTRO PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Mounstro", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elemento ::= CASTILLO PAREN_ABRE coords PAREN_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ArrayList<Integer> cc = (ArrayList<Integer>)c;
    RESULT = new ElementoMapa("Castillo", cc.get(0), cc.get(1), cc.get(2));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // coords ::= NUM COMA NUM COMA NUM 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<Integer> c = new ArrayList<>();
    c.add((Integer)x);
    c.add((Integer)y);
    c.add((Integer)z);
    RESULT = c;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coords",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

