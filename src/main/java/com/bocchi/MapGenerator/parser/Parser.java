
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat May 31 00:22:55 CST 2025
//----------------------------------------------------

package com.bocchi.MapGenerator.parser;

import java.util.ArrayList;
import com.bocchi.MapGenerator.model.ElementoMapa;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat May 31 00:22:55 CST 2025
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\004\007\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\003\007\000" +
    "\002\003\007\000\002\003\007\000\002\003\007\000\002" +
    "\003\007\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\003\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\042\002\000\004\000\005\000\006\000\007" +
    "\000\010\000\011\000\012\000\013\000\014\000\015\000" +
    "\016\000\017\000\020\000\021\000\022\000\001\002\000" +
    "\042\002\013\004\012\005\014\006\011\007\020\010\007" +
    "\011\016\012\006\013\025\014\023\015\022\016\015\017" +
    "\005\020\017\021\021\022\024\001\002\000\004\024\123" +
    "\001\002\000\004\024\117\001\002\000\004\024\113\001" +
    "\002\000\042\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\022\uffff\001\002\000\004" +
    "\024\107\001\002\000\004\024\103\001\002\000\004\002" +
    "\001\001\002\000\004\024\077\001\002\000\004\024\073" +
    "\001\002\000\004\024\067\001\002\000\004\024\063\001" +
    "\002\000\004\024\057\001\002\000\004\024\053\001\002" +
    "\000\004\024\047\001\002\000\004\024\043\001\002\000" +
    "\004\024\037\001\002\000\004\024\026\001\002\000\004" +
    "\023\027\001\002\000\004\026\033\001\002\000\004\025" +
    "\031\001\002\000\004\027\032\001\002\000\042\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\001\002\000\004\023\034\001\002\000" +
    "\004\026\035\001\002\000\004\023\036\001\002\000\004" +
    "\025\ufffe\001\002\000\004\023\027\001\002\000\004\025" +
    "\041\001\002\000\004\027\042\001\002\000\042\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\001\002\000\004\023\027\001\002\000" +
    "\004\025\045\001\002\000\004\027\046\001\002\000\042" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\001\002\000\004\023\027\001" +
    "\002\000\004\025\051\001\002\000\004\027\052\001\002" +
    "\000\042\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\001\002\000\004\023" +
    "\027\001\002\000\004\025\055\001\002\000\004\027\056" +
    "\001\002\000\042\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\001\002\000" +
    "\004\023\027\001\002\000\004\025\061\001\002\000\004" +
    "\027\062\001\002\000\042\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\001" +
    "\002\000\004\023\027\001\002\000\004\025\065\001\002" +
    "\000\004\027\066\001\002\000\042\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\001\002\000\004\023\027\001\002\000\004\025\071" +
    "\001\002\000\004\027\072\001\002\000\042\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\001\002\000\004\023\027\001\002\000\004" +
    "\025\075\001\002\000\004\027\076\001\002\000\042\002" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\001\002\000\004\023\027\001\002" +
    "\000\004\025\101\001\002\000\004\027\102\001\002\000" +
    "\042\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\001\002\000\004\023\027" +
    "\001\002\000\004\025\105\001\002\000\004\027\106\001" +
    "\002\000\042\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\001\002\000\004" +
    "\023\027\001\002\000\004\025\111\001\002\000\004\027" +
    "\112\001\002\000\042\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\001\002" +
    "\000\004\023\027\001\002\000\004\025\115\001\002\000" +
    "\004\027\116\001\002\000\042\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\001\002\000\004\023\027\001\002\000\004\025\121\001" +
    "\002\000\004\027\122\001\002\000\042\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\001\002\000\004\023\027\001\002\000\004\025" +
    "\125\001\002\000\004\027\126\001\002\000\042\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\002\003\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Inyectados por el servicio de Spring
    public java.util.List elementosResultado;
    public com.bocchi.MapGenerator.NoiseGenerator noiseGen;
    
    // Método para acceder a la lista desde las acciones
    public void addElemento(ElementoMapa elemento) {
        if (elementosResultado != null) {
            elementosResultado.add(elemento);
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mapa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mapa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mapa ::= mapa elemento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // coords ::= NUM COMA NUM COMA NUM 
            {
              int[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new int[]{ x.intValue(), y.intValue(), z.intValue() };
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coords",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elemento ::= PINO PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("pino", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= CUEVA PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("cueva", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elemento ::= ARBOL PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("arbol", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= ANIMAL PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("animal", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elemento ::= DRAGON PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("dragon", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // elemento ::= PIEDRA PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("piedra", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // elemento ::= PERSONA PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("persona", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // elemento ::= CASTILLO PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("castillo", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // elemento ::= MOUNSTRO PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("mounstro", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elemento ::= CASA_MADERA PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("casa_madera", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elemento ::= CASA_PIEDRA PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("casa_piedra", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // elemento ::= PIEDRA_CALIZA PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("piedra_caliza", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elemento ::= PIEDRA_MARMOL PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("piedra_marmol", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elemento ::= PIEDRA_GRANITO PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("piedra_granito", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elemento ::= TORRE_CASTILLO PAREN_ABRE coords PAREN_CIERRA PUNTOYCOMA 
            {
              ElementoMapa RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ElementoMapa("torre_castillo", c[0], c[1], c[2]);
        parser.addElemento(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

